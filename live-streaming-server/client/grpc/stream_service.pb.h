// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stream_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stream_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stream_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stream_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stream_5fservice_2eproto;
namespace gRPC_stream {
class GetMatRequest;
struct GetMatRequestDefaultTypeInternal;
extern GetMatRequestDefaultTypeInternal _GetMatRequest_default_instance_;
class GetMatResponse;
struct GetMatResponseDefaultTypeInternal;
extern GetMatResponseDefaultTypeInternal _GetMatResponse_default_instance_;
class OcvMat;
struct OcvMatDefaultTypeInternal;
extern OcvMatDefaultTypeInternal _OcvMat_default_instance_;
}  // namespace gRPC_stream
PROTOBUF_NAMESPACE_OPEN
template<> ::gRPC_stream::GetMatRequest* Arena::CreateMaybeMessage<::gRPC_stream::GetMatRequest>(Arena*);
template<> ::gRPC_stream::GetMatResponse* Arena::CreateMaybeMessage<::gRPC_stream::GetMatResponse>(Arena*);
template<> ::gRPC_stream::OcvMat* Arena::CreateMaybeMessage<::gRPC_stream::OcvMat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gRPC_stream {

// ===================================================================

class OcvMat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPC_stream.OcvMat) */ {
 public:
  inline OcvMat() : OcvMat(nullptr) {}
  ~OcvMat() override;
  explicit PROTOBUF_CONSTEXPR OcvMat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OcvMat(const OcvMat& from);
  OcvMat(OcvMat&& from) noexcept
    : OcvMat() {
    *this = ::std::move(from);
  }

  inline OcvMat& operator=(const OcvMat& from) {
    CopyFrom(from);
    return *this;
  }
  inline OcvMat& operator=(OcvMat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OcvMat& default_instance() {
    return *internal_default_instance();
  }
  static inline const OcvMat* internal_default_instance() {
    return reinterpret_cast<const OcvMat*>(
               &_OcvMat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OcvMat& a, OcvMat& b) {
    a.Swap(&b);
  }
  inline void Swap(OcvMat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OcvMat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OcvMat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OcvMat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OcvMat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OcvMat& from) {
    OcvMat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OcvMat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPC_stream.OcvMat";
  }
  protected:
  explicit OcvMat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatDataFieldNumber = 4,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
    kEltTypeFieldNumber = 3,
  };
  // bytes mat_data = 4;
  void clear_mat_data();
  const std::string& mat_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mat_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mat_data();
  PROTOBUF_NODISCARD std::string* release_mat_data();
  void set_allocated_mat_data(std::string* mat_data);
  private:
  const std::string& _internal_mat_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mat_data(const std::string& value);
  std::string* _internal_mutable_mat_data();
  public:

  // int32 rows = 1;
  void clear_rows();
  int32_t rows() const;
  void set_rows(int32_t value);
  private:
  int32_t _internal_rows() const;
  void _internal_set_rows(int32_t value);
  public:

  // int32 cols = 2;
  void clear_cols();
  int32_t cols() const;
  void set_cols(int32_t value);
  private:
  int32_t _internal_cols() const;
  void _internal_set_cols(int32_t value);
  public:

  // int32 elt_type = 3;
  void clear_elt_type();
  int32_t elt_type() const;
  void set_elt_type(int32_t value);
  private:
  int32_t _internal_elt_type() const;
  void _internal_set_elt_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gRPC_stream.OcvMat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mat_data_;
    int32_t rows_;
    int32_t cols_;
    int32_t elt_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPC_stream.GetMatRequest) */ {
 public:
  inline GetMatRequest() : GetMatRequest(nullptr) {}
  ~GetMatRequest() override;
  explicit PROTOBUF_CONSTEXPR GetMatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMatRequest(const GetMatRequest& from);
  GetMatRequest(GetMatRequest&& from) noexcept
    : GetMatRequest() {
    *this = ::std::move(from);
  }

  inline GetMatRequest& operator=(const GetMatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMatRequest& operator=(GetMatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMatRequest* internal_default_instance() {
    return reinterpret_cast<const GetMatRequest*>(
               &_GetMatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMatRequest& a, GetMatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMatRequest& from) {
    GetMatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPC_stream.GetMatRequest";
  }
  protected:
  explicit GetMatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gRPC_stream.GetMatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetMatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPC_stream.GetMatResponse) */ {
 public:
  inline GetMatResponse() : GetMatResponse(nullptr) {}
  ~GetMatResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMatResponse(const GetMatResponse& from);
  GetMatResponse(GetMatResponse&& from) noexcept
    : GetMatResponse() {
    *this = ::std::move(from);
  }

  inline GetMatResponse& operator=(const GetMatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMatResponse& operator=(GetMatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMatResponse* internal_default_instance() {
    return reinterpret_cast<const GetMatResponse*>(
               &_GetMatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetMatResponse& a, GetMatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetMatResponse& from) {
    GetMatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPC_stream.GetMatResponse";
  }
  protected:
  explicit GetMatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatFieldNumber = 1,
  };
  // .gRPC_stream.OcvMat mat = 1;
  bool has_mat() const;
  private:
  bool _internal_has_mat() const;
  public:
  void clear_mat();
  const ::gRPC_stream::OcvMat& mat() const;
  PROTOBUF_NODISCARD ::gRPC_stream::OcvMat* release_mat();
  ::gRPC_stream::OcvMat* mutable_mat();
  void set_allocated_mat(::gRPC_stream::OcvMat* mat);
  private:
  const ::gRPC_stream::OcvMat& _internal_mat() const;
  ::gRPC_stream::OcvMat* _internal_mutable_mat();
  public:
  void unsafe_arena_set_allocated_mat(
      ::gRPC_stream::OcvMat* mat);
  ::gRPC_stream::OcvMat* unsafe_arena_release_mat();

  // @@protoc_insertion_point(class_scope:gRPC_stream.GetMatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPC_stream::OcvMat* mat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stream_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OcvMat

// int32 rows = 1;
inline void OcvMat::clear_rows() {
  _impl_.rows_ = 0;
}
inline int32_t OcvMat::_internal_rows() const {
  return _impl_.rows_;
}
inline int32_t OcvMat::rows() const {
  // @@protoc_insertion_point(field_get:gRPC_stream.OcvMat.rows)
  return _internal_rows();
}
inline void OcvMat::_internal_set_rows(int32_t value) {
  
  _impl_.rows_ = value;
}
inline void OcvMat::set_rows(int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:gRPC_stream.OcvMat.rows)
}

// int32 cols = 2;
inline void OcvMat::clear_cols() {
  _impl_.cols_ = 0;
}
inline int32_t OcvMat::_internal_cols() const {
  return _impl_.cols_;
}
inline int32_t OcvMat::cols() const {
  // @@protoc_insertion_point(field_get:gRPC_stream.OcvMat.cols)
  return _internal_cols();
}
inline void OcvMat::_internal_set_cols(int32_t value) {
  
  _impl_.cols_ = value;
}
inline void OcvMat::set_cols(int32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:gRPC_stream.OcvMat.cols)
}

// int32 elt_type = 3;
inline void OcvMat::clear_elt_type() {
  _impl_.elt_type_ = 0;
}
inline int32_t OcvMat::_internal_elt_type() const {
  return _impl_.elt_type_;
}
inline int32_t OcvMat::elt_type() const {
  // @@protoc_insertion_point(field_get:gRPC_stream.OcvMat.elt_type)
  return _internal_elt_type();
}
inline void OcvMat::_internal_set_elt_type(int32_t value) {
  
  _impl_.elt_type_ = value;
}
inline void OcvMat::set_elt_type(int32_t value) {
  _internal_set_elt_type(value);
  // @@protoc_insertion_point(field_set:gRPC_stream.OcvMat.elt_type)
}

// bytes mat_data = 4;
inline void OcvMat::clear_mat_data() {
  _impl_.mat_data_.ClearToEmpty();
}
inline const std::string& OcvMat::mat_data() const {
  // @@protoc_insertion_point(field_get:gRPC_stream.OcvMat.mat_data)
  return _internal_mat_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OcvMat::set_mat_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mat_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gRPC_stream.OcvMat.mat_data)
}
inline std::string* OcvMat::mutable_mat_data() {
  std::string* _s = _internal_mutable_mat_data();
  // @@protoc_insertion_point(field_mutable:gRPC_stream.OcvMat.mat_data)
  return _s;
}
inline const std::string& OcvMat::_internal_mat_data() const {
  return _impl_.mat_data_.Get();
}
inline void OcvMat::_internal_set_mat_data(const std::string& value) {
  
  _impl_.mat_data_.Set(value, GetArenaForAllocation());
}
inline std::string* OcvMat::_internal_mutable_mat_data() {
  
  return _impl_.mat_data_.Mutable(GetArenaForAllocation());
}
inline std::string* OcvMat::release_mat_data() {
  // @@protoc_insertion_point(field_release:gRPC_stream.OcvMat.mat_data)
  return _impl_.mat_data_.Release();
}
inline void OcvMat::set_allocated_mat_data(std::string* mat_data) {
  if (mat_data != nullptr) {
    
  } else {
    
  }
  _impl_.mat_data_.SetAllocated(mat_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mat_data_.IsDefault()) {
    _impl_.mat_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gRPC_stream.OcvMat.mat_data)
}

// -------------------------------------------------------------------

// GetMatRequest

// bool status = 1;
inline void GetMatRequest::clear_status() {
  _impl_.status_ = false;
}
inline bool GetMatRequest::_internal_status() const {
  return _impl_.status_;
}
inline bool GetMatRequest::status() const {
  // @@protoc_insertion_point(field_get:gRPC_stream.GetMatRequest.status)
  return _internal_status();
}
inline void GetMatRequest::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void GetMatRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gRPC_stream.GetMatRequest.status)
}

// -------------------------------------------------------------------

// GetMatResponse

// .gRPC_stream.OcvMat mat = 1;
inline bool GetMatResponse::_internal_has_mat() const {
  return this != internal_default_instance() && _impl_.mat_ != nullptr;
}
inline bool GetMatResponse::has_mat() const {
  return _internal_has_mat();
}
inline void GetMatResponse::clear_mat() {
  if (GetArenaForAllocation() == nullptr && _impl_.mat_ != nullptr) {
    delete _impl_.mat_;
  }
  _impl_.mat_ = nullptr;
}
inline const ::gRPC_stream::OcvMat& GetMatResponse::_internal_mat() const {
  const ::gRPC_stream::OcvMat* p = _impl_.mat_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPC_stream::OcvMat&>(
      ::gRPC_stream::_OcvMat_default_instance_);
}
inline const ::gRPC_stream::OcvMat& GetMatResponse::mat() const {
  // @@protoc_insertion_point(field_get:gRPC_stream.GetMatResponse.mat)
  return _internal_mat();
}
inline void GetMatResponse::unsafe_arena_set_allocated_mat(
    ::gRPC_stream::OcvMat* mat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mat_);
  }
  _impl_.mat_ = mat;
  if (mat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPC_stream.GetMatResponse.mat)
}
inline ::gRPC_stream::OcvMat* GetMatResponse::release_mat() {
  
  ::gRPC_stream::OcvMat* temp = _impl_.mat_;
  _impl_.mat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPC_stream::OcvMat* GetMatResponse::unsafe_arena_release_mat() {
  // @@protoc_insertion_point(field_release:gRPC_stream.GetMatResponse.mat)
  
  ::gRPC_stream::OcvMat* temp = _impl_.mat_;
  _impl_.mat_ = nullptr;
  return temp;
}
inline ::gRPC_stream::OcvMat* GetMatResponse::_internal_mutable_mat() {
  
  if (_impl_.mat_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPC_stream::OcvMat>(GetArenaForAllocation());
    _impl_.mat_ = p;
  }
  return _impl_.mat_;
}
inline ::gRPC_stream::OcvMat* GetMatResponse::mutable_mat() {
  ::gRPC_stream::OcvMat* _msg = _internal_mutable_mat();
  // @@protoc_insertion_point(field_mutable:gRPC_stream.GetMatResponse.mat)
  return _msg;
}
inline void GetMatResponse::set_allocated_mat(::gRPC_stream::OcvMat* mat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mat_;
  }
  if (mat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mat);
    if (message_arena != submessage_arena) {
      mat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mat_ = mat;
  // @@protoc_insertion_point(field_set_allocated:gRPC_stream.GetMatResponse.mat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gRPC_stream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stream_5fservice_2eproto
